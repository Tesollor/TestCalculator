1.Task

You can find the detailed project requirements and tasks in this document:
https://docs.google.com/document/d/1zpXXeSae-BlcxPKgw3DhxZA92cspVailrPYoaXSYrW8/edit?tab=t.0

2.How to run the app
	1.Ensure you have Node.js and npm installed on your system.
	2.Install the project dependencies : npm install.
	3.Build the project using Webpack: npm run build.
	4.Open the dist/index.html file in a browser to view the app

3.Folder structure
	.husky/:
Contains git hooks for managing code quality and automating tasks before certain git actions. The pre-commit file likely contains commands to run before each commit to ensure code meets certain standards.

	.vscode/:
Stores Visual Studio Code configuration files like settings.json, which defines editor-specific settings such as linting, formatting, or extensions.
	
	dist/:
Contains the output files generated by Webpack after building the project, including the bundled JavaScript file (bundle.js) and the final index.html that references the bundled scripts and assets.

	src/:
The source folder containing the actual project code:
index.html: The main HTML file that serves as the entry point for the application.
script.js: The primary JavaScript file where the application's logic is written.

	node_modules/:
Automatically created after running npm install. Contains all project dependencies listed in package.json.

	other files:
.babelrc: Configuration for Babel, a tool that helps transform ES6+ code into backwards-compatible JavaScript.
.eslintrc: Configuration file for ESLint, used to define code linting rules.
.prettierrc: Configuration file for Prettier, used for code formatting.
package.json and package-lock.json: Define project dependencies and scripts.
webpack.config.js: Webpack configuration file used to define how to bundle the source files into a production-ready format.